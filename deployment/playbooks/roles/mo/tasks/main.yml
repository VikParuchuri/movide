---
- name: create user group
  group: name=ar state=present

- name: add ubuntu to ar
  user: name=ubuntu append=yes groups="adm,ar"

- name: Create www-data user
  user: name={{movide_user}} append=yes groups="adm,ar" shell=/bin/bash

- name:  Creating admin users
  user: name={{ item.user }} append=yes groups={{ "adm,ar," + ",".join(item.groups) }} shell=/bin/bash
  with_items: admin_users
  when: admin_users is defined

- name: Copying ssh keys for admin users
  authorized_key: user={{item.user}} key="{{ lookup('file', item.path ) }}"
  with_items: admin_keys
  when: admin_keys is defined

#Allows us to recover from a bad sudoers file
- name:  Install policykit
  apt: pkg=policykit-1 install_recommends=yes state=present update_cache=yes

- name: upload sudoers.d file
  copy: src=sudoers-admin dest=/tmp/admin-sudo owner=root group=root mode=0440

- name: move file to sudoers.d
  shell: visudo -q -c -f /tmp/admin-sudo && cp /tmp/admin-sudo /etc/sudoers.d/admin-sudo

- name: install python and pip
  apt: pkg={{item}} install_recommends=yes state=present update_cache=yes
  with_items:
  - python2.7
  - python-pip
  - python2.7-dev
  - python-mysqldb

- name: pip install virtualenv
  pip: name=virtualenv state=present

- name: pip install virtualenvwrapper
  pip: name=virtualenvwrapper state=present

- name: create virtualenv directory
  file: path={{ venv_dir }} owner=ubuntu group=adm mode=2775 state=directory

- name: create the virtualenv directory files
  command: "/usr/local/bin/virtualenv {{ venv_dir }} --distribute creates={{venv_dir}}/bin/activate"

- name: gunicorn
  pip: name=gunicorn virtualenv="{{venv_dir}}" state=present

- name: setup mysql database
  mysql_db: db={{database_name}} state=present login_host={{database_host}} login_password={{database_root_password}} login_user={{database_root_user}}

- name: setup mysql user
  mysql_user: name={{database_user}} password={{database_password}} priv={{database_name}}.*:ALL state=present login_host={{database_host}} login_password={{database_root_password}} login_user={{database_root_user}} host=%
  when: database_host not in ["localhost", "127.0.0.1"]

- name: setup mysql user
  mysql_user: name={{database_user}} password={{database_password}} priv={{database_name}}.*:ALL state=present login_host={{database_host}} login_password={{database_root_password}} login_user={{database_root_user}}
  when: database_host in ["localhost", "127.0.0.1"]

- name: create www directory if needed
  file: path={{app_base_dir}} state=directory

#Create the templates for upstart services
- name:  render celery service from template
  template: src=celery.conf.j2 dest=/etc/init/celery.conf owner=root group=ar mode=0664
  notify: restart celery

#Create the templates for upstart services
- name:  render movide service from template
  template: src=movide.conf.j2 dest=/etc/init/movide.conf owner=root group=ar mode=0664
  notify: restart movide

#Upload config files for django (auth and env)
- name:  create movide application config env.json file
  template: src=env.json.j2 dest={{app_base_dir}}/env.json owner={{movide_user}} group=ar mode=0640
  notify:
    -  restart celery
    -  restart movide

- name:  create movide auth file auth.json
  template: src=auth.json.j2 dest={{app_base_dir}}/auth.json owner={{movide_user}} group=ar mode=0640
  notify:
    -  restart celery
    -  restart movide

#Needed if using redis to prevent memory issues
- name:  change memory commit settings -- needed for redis
  command: sysctl vm.overcommit_memory=1

- name:  set permissions on app_base_dir sgid for ar
  file: path={{app_base_dir}} owner=root group=ar mode=2775 state=directory
  file: path={{venv_dir}} owner=root group=ar mode=2775 state=directory

- name:  Install git so that we can clone repos
  apt: pkg=git install_recommends=yes state=present

#Create directories for repos
- name:  create movide directory and set permissions
  file: path={{movide_dir}} owner={{movide_user}} group=ar mode=2775 state=directory

#Upload custom git ssh script
- name: upload ssh script
  copy: src=git_ssh.sh dest=/tmp/git_ssh.sh force=yes owner=root group=adm mode=750

- name: Upload the SSH key
  copy: src={{secure_dir}}/files/movide_deploy dest=/tmp/id_rsa_deployment mode=600

#Grab both repos or update
- name:  git checkout movide repo into movide_dir
  git: dest={{movide_dir}} repo={{movide_source_repo}} version={{movide_branch}}
  environment:
      GIT_SSH: /tmp/git_ssh.sh
  notify:
    -  restart celery
    -  restart movide

#Change cache permissions
- name: create cache directory
  file: path={{movide_dir}}/cache/ owner=movide group=ar mode=2775 state=directory recurse=yes

#Change media permissions
- name: create media directory
  file: path={{movide_dir}}/media/ owner=movide group=ar mode=2775 state=directory recurse=yes

#Install system packages
- name:  install movide apt packages
  command: xargs -a {{movide_dir}}/apt-packages.txt apt-get install -y

- name : install python requirements for movide
  pip: requirements="{{movide_dir}}/requirements.txt" virtualenv="{{venv_dir}}" state=present

#Needed for the ease package to work
- name:  install nltk data
  shell: command="{{venv_dir}}/bin/python -m nltk.downloader -d {{nltk_data_dir}} punkt stopwords"

- name:  set permissions on nltk data directory
  file: path={{nltk_data_dir}} owner={{movide_user}} group=ar mode=2775 state=directory

- name:  django syncdb, migrate, and collectstatic for movide
  shell: "{{venv_dir}}/bin/python {{movide_dir}}/manage.py {{item}} --noinput --settings={{movide_settings}} --pythonpath={{movide_dir}}"
  with_items:
    - syncdb
    - migrate
    - collectstatic

- name:  create nginx directory and set perms
  file: path=/etc/nginx/sites-available owner=root group=ar mode=2775 state=directory

#Install nginx sites available
#remove default link, render template, link template to sites-enabled to activate
- name:  Removing default nginx config
  file: path=/etc/nginx/sites-enabled/default state=absent
  notify:  restart nginx

- name:  render nginx sites available
  template: src=nginx-movide.j2 dest=/etc/nginx/sites-available/{{ site_name }}
  notify:  restart nginx

- name:  Creating nginx config link {{ site_name }}
  file: src=/etc/nginx/sites-available/{{ site_name }} dest=/etc/nginx/sites-enabled/{{ site_name }} state=link owner=root group=root
  notify:  restart nginx